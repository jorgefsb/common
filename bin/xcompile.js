'use strict';

const child = require('child_process');
const roles = require('../roles');
const path = require('path');
const fs = require('fs');

/**
 * xcompile evaluates and compiles the roles to Go.
 * @param {string} target Target file name
 * @param {Function} callback Callbacks with exit code.
 */
function xcompile (target, callback) {
    const fmt = child.spawn('gofmt');
    fmt.stderr.pipe(process.stdout);
    fmt.stdout.pipe(fs.createWriteStream(target));

    fmt.stdin.write(`
        // AUTOGENERATED FILE, DO NOT EDIT

        package bcommon

        var (
    `);

    const names = {};

    /**
     * fmtPermission formats a permission separated by colons into a StudlyCase
     * variable.
     * @param {String} perm
     * @return {String}
     */
    const fmtPermission = (perm) => {
        const parts = perm.split(/[:_]/).map(p => p[0].toUpperCase() + p.slice(1));

        if (parts[parts.length - 1] === 'Self') {
            const base = parts.slice(0, -1).join('');
            names[base] = perm.slice(0, -':self'.length);
            return `${parts.slice(0, -1).join('')} + ":self"`;
        }

        const out = parts.join('');
        names[out] = perm;
        return out;
    };


    Object.keys(roles.list).forEach(key => {
        const role = roles.list[key];
        const perms = roles.getPermissions([key])
            .slice()
            .sort()
            .map(item => `${fmtPermission(item)},\n`)
            .join('');

        fmt.stdin.write(`
            ${role.name} = &Role{
                Name: "${role.name}",
                Exclusivity: ${role.exclusivity | 0},
                Level: ${role.level},
                Permissions: []string{\n${perms}},
            }`
        );
    });

    fmt.stdin.write(`
        )

        const (
    `);

    Object.keys(names).sort().forEach(key => {
        fmt.stdin.write(`${key} = "${names[key]}"\n`);
    });

    fmt.stdin.write(`
        )

        var RoleMap = map[string]*Role{
    `);

    Object.keys(roles.list).forEach(name => {
        fmt.stdin.write(`"${name}": ${name},\n`);
    });

    fmt.stdin.write('}');
    fmt.stdin.end();

    fmt.on('exit', (code) => callback(code));
}

module.exports = xcompile;


if (require.main === module) {
    xcompile(
        path.join(__dirname, '../', 'go/bcommon/roles.go'),
        (code) => process.exit(code)
    );
}
